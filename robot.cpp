#include "robot.h"
#include <cstdio>

//=============================================================================
// BI·∫æN TO√ÄN C·ª§C - Robot instance duy nh·∫•t
//=============================================================================
Robot robot;

//=============================================================================
// H√ÄM TI·ªÜN √çCH - H·ªó tr·ª£ animation m∆∞·ª£t m√†
//=============================================================================
float smooth(float t) {
    // ƒê∆∞·ªùng cong animation m∆∞·ª£t (ease in/out)
    // B·∫Øt ƒë·∫ßu ch·∫≠m, tƒÉng t·ªëc, r·ªìi ch·∫≠m l·∫°i ·ªü cu·ªëi
    return t * t * (3.0f - 2.0f * t);
}

//=============================================================================
// KH·ªûI T·∫†O ROBOT - ƒê·∫∑t v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
//=============================================================================
void initRobot() {
    // ƒê·∫∑t l·∫°i t·∫•t c·∫£ g√≥c kh·ªõp v·ªÅ v·ªã tr√≠ trung t√≠nh
    robot.shoulderY = robot.shoulderZ = 0.0f;
    robot.elbow = 0.0f;
    robot.wristZ = robot.wristY = 0.0f;
    robot.fingers = 90.0f;  // B·∫Øt ƒë·∫ßu v·ªõi gripper m·ªü
    robot.body = 0.0f;
    
    // ƒê·∫∑t l·∫°i tr·∫°ng th√°i animation
    robot.phase = IDLE;
    robot.progress = 0.0f;
    robot.moving = false;
    
    // C·ªëc b·∫Øt ƒë·∫ßu tr√™n b√†n (v·ªã tr√≠ g·∫ßn robot h∆°n ƒë·ªÉ d·ªÖ n·∫Øm)
    robot.cupX = 2.2f;  // G·∫ßn robot h∆°n ƒë·ªÉ d·ªÖ v·ªõi t·ªõi
    robot.cupY = TABLE_Y + 0.25f;  // ƒê·∫∑t tr√™n m·∫∑t b√†n
    robot.cupZ = 0.0f;
    robot.holdingCup = false;
    robot.cupHasCoffee = false;
}

//=============================================================================
// ƒêI·ªÄU KHI·ªÇN ANIMATION - B·∫Øt ƒë·∫ßu v√† reset robot
//=============================================================================
void startCoffeeSequence() {
    if (robot.moving) return;  // Kh√¥ng b·∫Øt ƒë·∫ßu n·∫øu ƒëang chuy·ªÉn ƒë·ªông
    
    robot.moving = true;
    robot.phase = REACH_CUP;
    robot.progress = 0.0f;
    printf("ü§ñ Bat dau quy trinh pha ca phe...\n");
}

void resetRobot() {
    initRobot();
    printf("üîÑ Robot da duoc reset ve vi tri ban dau\n");
}

//=============================================================================
// C·∫¨P NH·∫¨T ANIMATION - ƒê∆∞·ª£c g·ªçi m·ªói frame ƒë·ªÉ c·∫≠p nh·∫≠t chuy·ªÉn ƒë·ªông robot
//=============================================================================
void updateRobot() {
    if (!robot.moving) return;  // Kh√¥ng c·∫≠p nh·∫≠t n·∫øu robot kh√¥ng chuy·ªÉn ƒë·ªông
    
    // TƒÉng ti·∫øn ƒë·ªô animation
    robot.progress += ANIMATION_SPEED;
    float t = robot.progress;
    if (t > 1.0f) t = 1.0f;
    float s = smooth(t);  // Phi√™n b·∫£n m∆∞·ª£t c·ªßa t
    
    // C·∫≠p nh·∫≠t robot d·ª±a tr√™n giai ƒëo·∫°n hi·ªán t·∫°i
    switch (robot.phase) {
        case REACH_CUP:
            // Di chuy·ªÉn c√°nh tay v·ªÅ ph√≠a c·ªëc
            robot.shoulderZ = s * -30.0f;  // H·∫° vai xu·ªëng nhi·ªÅu h∆°n
            robot.elbow = s * -50.0f;      // G·∫≠p khu·ª∑u tay nhi·ªÅu h∆°n
            robot.wristZ = s * 40.0f;      // N√¢ng c·ªï tay l√™n
            robot.shoulderY = s * 10.0f;   // Xoay vai m·ªôt ch√∫t ƒë·ªÉ h∆∞·ªõng v·ªÅ c·ªëc
            robot.fingers = 90.0f;         // Gi·ªØ gripper m·ªü
            
            if (robot.progress >= 1.0f) {
                robot.phase = GRAB_CUP;
                robot.progress = 0.0f;
                printf("üìã Dang nam coc...\n");
            }
            break;
            
        case GRAB_CUP:
            // Xoay gripper v√† ƒë√≥ng ng√≥n tay ƒë·ªÉ n·∫Øm c·ªëc
            robot.wristY = s * -90.0f;  // Xoay ƒë·ªÉ th·∫≥ng h√†ng v·ªõi c·ªëc
            
            // ƒê√≥ng gripper t·ª´ t·ª´ ƒë·ªÉ n·∫Øm ch·∫∑t c·ªëc
            if (s < 0.5f) {
                // 50% ƒë·∫ßu: ch·ªâ xoay gripper
                robot.fingers = 90.0f;
            } else {
                // 50% sau: ƒë√≥ng gripper ƒë·ªÉ n·∫Øm c·ªëc
                float gripProgress = (s - 0.5f) / 0.5f;
                robot.fingers = 90.0f - gripProgress * 60.0f;  // ƒê√≥ng ch·∫∑t h∆°n
            }
            
            if (s > 0.7f) {
                robot.holdingCup = true;  // B·∫Øt ƒë·∫ßu c·∫ßm c·ªëc
                // Nh·∫•c c·ªëc l√™n m·ªôt ch√∫t ƒë·ªÉ r·ªùi kh·ªèi b√†n
                robot.shoulderZ = -30.0f + (s - 0.7f) / 0.3f * 8.0f;
            }
            
            if (robot.progress >= 1.0f) {
                robot.phase = TURN_TO_MACHINE;
                robot.progress = 0.0f;
                printf("üîÑ Dang xoay ve phia may pha ca phe...\n");
            }
            break;
            
        case TURN_TO_MACHINE:
            // Xoay th√¢n v√† ƒë·ªãnh v·ªã c√°nh tay v·ªÅ ph√≠a m√°y pha c√† ph√™
            robot.body = s * -180.0f;           // Xoay th√¢n 180 ƒë·ªô
            robot.shoulderY = 10.0f + s * 15.0f; // ƒêi·ªÅu ch·ªânh vai ngang
            robot.shoulderZ = -22.0f + s * 17.0f; // N√¢ng vai l√™n
            robot.elbow = -50.0f + s * 30.0f;    // Du·ªói khu·ª∑u tay
            robot.wristZ = 40.0f + s * 50.0f;    // N√¢ng c·ªï tay l√™n cao
            robot.wristY = -90.0f;               // Gi·ªØ gripper th·∫≥ng
            
            if (robot.progress >= 1.0f) {
                robot.phase = POUR_COFFEE;
                robot.progress = 0.0f;
                printf("‚òï Dang rot ca phe...\n");
            }
            break;
            
        case POUR_COFFEE:
            // Gi·ªØ c·ªëc ·ªïn ƒë·ªãnh d∆∞·ªõi v√≤i pha c√† ph√™
            robot.wristZ = 90.0f;   // C·ªëc th·∫≥ng ƒë·ª©ng
            robot.wristY = -90.0f;  // Gripper h∆∞·ªõng ƒë√∫ng
            
            if (robot.progress >= 1.5f) {  // ƒê·ª£i l√¢u h∆°n ƒë·ªÉ pha c√† ph√™
                robot.cupHasCoffee = true;
                robot.phase = RETURN_CUP;
                robot.progress = 0.0f;
                printf("‚Ü©Ô∏è Dang quay ve ban...\n");
            }
            break;
            
        case RETURN_CUP: {
            // ƒê·∫£o ng∆∞·ª£c chuy·ªÉn ƒë·ªông ƒë·ªÉ quay v·ªÅ b√†n
            float reverse = 1.0f - s;
            robot.body = reverse * -180.0f;           // Xoay th√¢n v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
            robot.shoulderY = 10.0f + reverse * 15.0f; // ƒêi·ªÅu ch·ªânh vai ngang
            robot.shoulderZ = -22.0f + reverse * 17.0f; // H·∫° vai xu·ªëng
            robot.elbow = -50.0f + reverse * 30.0f;    // G·∫≠p khu·ª∑u tay l·∫°i
            robot.wristZ = 40.0f + reverse * 50.0f;    // H·∫° c·ªï tay xu·ªëng
            robot.wristY = -90.0f;                     // Gi·ªØ gripper th·∫≥ng
            
            if (robot.progress >= 1.0f) {
                robot.phase = PLACE_CUP;
                robot.progress = 0.0f;
                printf("üìç Dang dat coc xuong...\n");
            }
            break;
        }
            
        case PLACE_CUP:
            // H·∫° c·ªëc xu·ªëng v√† th·∫£ ra
            robot.shoulderZ = -30.0f - s * 8.0f;  // H·∫° vai xu·ªëng ƒë·ªÉ ƒë·∫∑t c·ªëc
            robot.wristZ = 40.0f - s * 10.0f;     // H·∫° c·ªï tay xu·ªëng
            robot.wristY = -90.0f + s * 90.0f;    // Xoay gripper v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
            
            if (s > 0.6f) {
                robot.holdingCup = false;  // Th·∫£ c·ªëc ra
                // M·ªü gripper t·ª´ t·ª´
                float releaseProgress = (s - 0.6f) / 0.4f;
                robot.fingers = 30.0f + releaseProgress * 60.0f;  // M·ªü gripper
            }
            
            if (robot.progress >= 1.0f) {
                robot.phase = GO_HOME;
                robot.progress = 0.0f;
                printf("üè† Dang ve vi tri ban dau...\n");
            }
            break;
            
        case GO_HOME: {
            // ƒê∆∞a t·∫•t c·∫£ kh·ªõp v·ªÅ v·ªã tr√≠ trung t√≠nh
            float reverse2 = 1.0f - s;
            robot.shoulderY = reverse2 * 10.0f;   // ƒê∆∞a vai v·ªÅ gi·ªØa
            robot.shoulderZ = reverse2 * -38.0f;  // ƒê∆∞a vai v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
            robot.elbow = reverse2 * -50.0f;      // Du·ªói khu·ª∑u tay
            robot.wristZ = reverse2 * 30.0f;      // ƒê∆∞a c·ªï tay v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
            robot.wristY = 0.0f;                  // Gripper th·∫≥ng
            robot.fingers = 90.0f;                // Gripper m·ªü
            
            if (robot.progress >= 1.0f) {
                robot.phase = FINISHED;
                robot.moving = false;
                printf("‚úÖ Ca phe da san sang! Nhan R de reset, SPACE de pha them.\n");
            }
            break;
        }
            
        case IDLE:
        case FINISHED:
            // Kh√¥ng l√†m g√¨ - ch·ªù l·ªánh t·ª´ ng∆∞·ªùi d√πng
            break;
            
        default:
            break;
    }
}

//=============================================================================
// H√ÄM V·∫º C∆† B·∫¢N - ƒê∆°n gi·∫£n v√† s·∫°ch s·∫Ω
//=============================================================================

void drawSimpleBox(float w, float h, float d, float r, float g, float b) {
    // V·∫Ω h√¨nh h·ªôp v·ªõi k√≠ch th∆∞·ªõc v√† m√†u s·∫Øc cho tr∆∞·ªõc
    glColor3f(r, g, b);
    glPushMatrix();
    glScalef(w, h, d);
    glutSolidCube(1.0f);
    glPopMatrix();
}

void drawSimpleCylinder(float radius, float height, float r, float g, float b) {
    // V·∫Ω h√¨nh tr·ª• v·ªõi b√°n k√≠nh, chi·ªÅu cao v√† m√†u s·∫Øc cho tr∆∞·ªõc
    glColor3f(r, g, b);
    GLUquadric* quad = gluNewQuadric();
    glRotatef(-90, 1, 0, 0);
    gluCylinder(quad, radius, radius, height, 20, 1);
    gluDeleteQuadric(quad);
}

//=============================================================================
// V·∫º C√ÅC TH√ÄNH PH·∫¶N ROBOT - Chia nh·ªè th√†nh t·ª´ng ph·∫ßn d·ªÖ hi·ªÉu
//=============================================================================

void drawRobotBase() {
    // ƒê·∫ø robot - ph·∫ßn c·ªë ƒë·ªãnh
    glPushMatrix();
    glTranslatef(0, -1, 0);
    drawSimpleBox(1.8f, 0.2f, 1.8f, 0.3f, 0.3f, 0.4f);  // ƒê·∫ø m√†u x√°m ƒë·∫≠m
    glPopMatrix();
    
    // C·ªôt trung t√¢m - n·ªëi ƒë·∫ø v·ªõi th√¢n robot
    glPushMatrix();
    drawSimpleCylinder(0.5f, 1.0f, 0.5f, 0.5f, 0.6f);  // C·ªôt m√†u x√°m xanh
    glPopMatrix();
}

void drawRobotArm() {
    glPushMatrix();
    
    // Di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ vai
    glTranslatef(0, 1, 0);
    glRotatef(robot.shoulderY, 0, 1, 0);  // Xoay vai ngang
    glRotatef(robot.shoulderZ, 0, 0, 1);  // Xoay vai d·ªçc
    
    // Kh·ªõp vai - h√¨nh c·∫ßu
    glColor3f(0.7f, 0.7f, 0.8f);
    glutSolidSphere(0.4f, 15, 15);
    
    // C√°nh tay tr√™n
    glTranslatef(ARM_UPPER/2, 0, 0);
    drawSimpleBox(ARM_UPPER, 0.5f, 0.5f, 0.6f, 0.6f, 0.7f);  // M√†u x√°m xanh
    
    // Kh·ªõp khu·ª∑u tay - h√¨nh c·∫ßu
    glTranslatef(ARM_UPPER/2, 0, 0);
    glRotatef(robot.elbow, 0, 0, 1);  // G·∫≠p khu·ª∑u tay
    glColor3f(0.7f, 0.7f, 0.8f);
    glutSolidSphere(0.3f, 12, 12);
    
    // C√°nh tay d∆∞·ªõi
    glTranslatef(ARM_LOWER/2, 0, 0);
    drawSimpleBox(ARM_LOWER, 0.4f, 0.4f, 0.6f, 0.6f, 0.7f);  // M√†u x√°m xanh
    
    // Kh·ªõp c·ªï tay - h√¨nh c·∫ßu
    glTranslatef(ARM_LOWER/2, 0, 0);
    glRotatef(robot.wristZ, 0, 0, 1);  // G·∫≠p c·ªï tay l√™n/xu·ªëng
    glRotatef(robot.wristY, 0, 1, 0);  // Xoay c·ªï tay tr√°i/ph·∫£i
    glColor3f(0.7f, 0.7f, 0.8f);
    glutSolidSphere(0.2f, 10, 10);
    
    // Gripper - tay k·∫πp
    glTranslatef(0.2f, 0, 0);
    
    // Th√¢n gripper
    drawSimpleBox(0.3f, 0.4f, 0.3f, 0.4f, 0.4f, 0.5f);  // M√†u x√°m ƒë·∫≠m
    
    // Ng√≥n tay tr√™n
    glPushMatrix();
    glTranslatef(0.15f, 0.15f, 0);
    glRotatef(-robot.fingers, 0, 0, 1);  // ƒê√≥ng/m·ªü ng√≥n tr√™n
    glTranslatef(0.15f, 0, 0);
    drawSimpleBox(0.3f, 0.08f, 0.2f, 0.5f, 0.5f, 0.6f);  // Ng√≥n m√†u x√°m nh·∫°t
    glPopMatrix();
    
    // Ng√≥n tay d∆∞·ªõi
    glPushMatrix();
    glTranslatef(0.15f, -0.15f, 0);
    glRotatef(robot.fingers, 0, 0, 1);   // ƒê√≥ng/m·ªü ng√≥n d∆∞·ªõi
    glTranslatef(0.15f, 0, 0);
    drawSimpleBox(0.3f, 0.08f, 0.2f, 0.5f, 0.5f, 0.6f);  // Ng√≥n m√†u x√°m nh·∫°t
    glPopMatrix();
    
    glPopMatrix();
}

//=============================================================================
// V·∫º ROBOT HO√ÄN CH·ªàNH - K·∫øt h·ª£p t·∫•t c·∫£ c√°c th√†nh ph·∫ßn
//=============================================================================

void drawRobot() {
    glPushMatrix();
    glTranslatef(0, 1.1f, 0);  // N√¢ng robot l√™n tr√™n m·∫∑t b√†n
    
    drawRobotBase();  // V·∫Ω ƒë·∫ø robot
    
    // Th√¢n tr√™n c√≥ th·ªÉ xoay
    glPushMatrix();
    glRotatef(robot.body, 0, 1, 0);  // Xoay th√¢n robot
    
    // Th√¢n robot
    glPushMatrix();
    glTranslatef(0, 0.7f, 0);
    drawSimpleBox(1.2f, 1.4f, 1.2f, 0.8f, 0.8f, 0.9f);  // Th√¢n m√†u x√°m nh·∫°t
    glPopMatrix();
    
    drawRobotArm();  // V·∫Ω c√°nh tay robot
    
    glPopMatrix();
    glPopMatrix();
}

//=============================================================================
// V·∫º M√îI TR∆Ø·ªúNG - B√†n, m√°y pha c√† ph√™ v√† c·ªëc
//=============================================================================

void drawTable() {
    // V·∫Ω m·∫∑t b√†n v·ªõi m√†u n√¢u ƒë·∫≠m, t·ªëi ƒë·ªÉ l√†m n·ªïi b·∫≠t c√°nh tay robot
    glPushMatrix();
    drawSimpleBox(10.0f, 0.2f, 8.0f, 0.25f, 0.15f, 0.10f);  // M√†u n√¢u ƒë·∫≠m, t·ªëi h∆°n ƒë·ªÉ nh√¨n r√µ robot
    glPopMatrix();
}

void drawCoffeeMachine() {
    // V·∫Ω m√°y pha c√† ph√™ ·ªü b√™n tr√°i b√†n
    glPushMatrix();
    glTranslatef(-4, TABLE_Y + 1.1f, 0);
    
    // Th√¢n m√°y pha c√† ph√™
    drawSimpleBox(1.5f, 2.2f, 1.4f, 0.6f, 0.6f, 0.65f);  // M√†u x√°m kim lo·∫°i
    
    // V√≤i pha c√† ph√™
    glPushMatrix();
    glTranslatef(0, -0.2f, 0.8f);
    drawSimpleCylinder(0.1f, 0.5f, 0.3f, 0.3f, 0.3f);  // V√≤i m√†u ƒëen
    glPopMatrix();
    
    glPopMatrix();
}

void drawCup() {
    glPushMatrix();
    
    if (robot.holdingCup) {
        // C·ªëc theo ch√≠nh x√°c v·ªã tr√≠ gripper
        glTranslatef(0, 1.1f, 0);                    // N√¢ng l√™n ƒë·ªô cao robot
        glRotatef(robot.body, 0, 1, 0);              // Xoay theo th√¢n robot
        glTranslatef(0, 1, 0);                       // Di chuy·ªÉn ƒë·∫øn vai
        glRotatef(robot.shoulderY, 0, 1, 0);         // Xoay vai ngang
        glRotatef(robot.shoulderZ, 0, 0, 1);         // Xoay vai d·ªçc
        glTranslatef(ARM_UPPER, 0, 0);               // Di chuy·ªÉn ƒë·∫øn khu·ª∑u tay
        glRotatef(robot.elbow, 0, 0, 1);             // G·∫≠p khu·ª∑u tay
        glTranslatef(ARM_LOWER, 0, 0);               // Di chuy·ªÉn ƒë·∫øn c·ªï tay
        glRotatef(robot.wristZ, 0, 0, 1);            // G·∫≠p c·ªï tay
        glRotatef(robot.wristY, 0, 1, 0);            // Xoay c·ªï tay
        glTranslatef(0.4f, 0, 0);                    // V·ªã tr√≠ trong gripper (g·∫ßn h∆°n)
    } else {
        // C·ªëc ƒë·∫∑t tr√™n b√†n
        glTranslatef(robot.cupX, robot.cupY, robot.cupZ);
    }
    
    // V·∫Ω c·ªëc c√† ph√™
    glColor3f(0.95f, 0.95f, 0.95f);  // M√†u tr·∫Øng kem, kh√¥ng qu√° ch√≥i
    glRotatef(-90, 1, 0, 0);         // Xoay ƒë·ªÉ c·ªëc ƒë·ª©ng th·∫≥ng
    GLUquadric* quad = gluNewQuadric();
    gluCylinder(quad, CUP_SIZE, CUP_SIZE, 0.5f, 20, 1);  // Th√†nh c·ªëc
    gluDisk(quad, 0, CUP_SIZE, 20, 1);                   // ƒê√°y c·ªëc
    
    // V·∫Ω c√† ph√™ n·∫øu c√≥
    if (robot.cupHasCoffee) {
        glColor3f(0.4f, 0.2f, 0.1f);  // M√†u n√¢u c√† ph√™
        glTranslatef(0, 0, 0.4f);      // N√¢ng l√™n g·∫ßn mi·ªáng c·ªëc
        gluDisk(quad, 0, CUP_SIZE * 0.9f, 20, 1);  // M·∫∑t c√† ph√™
    }
    
    gluDeleteQuadric(quad);
    glPopMatrix();
}

//=============================================================================
// V·∫º TO√ÄN B·ªò SCENE - K·∫øt h·ª£p t·∫•t c·∫£ c√°c ƒë·ªëi t∆∞·ª£ng
//=============================================================================

void drawScene() {
    // V·∫Ω to√†n b·ªô scene: b√†n, m√°y pha c√† ph√™, v√† c·ªëc
    drawTable();         // M·∫∑t b√†n
    drawCoffeeMachine(); // M√°y pha c√† ph√™
    drawCup();           // C·ªëc c√† ph√™
}