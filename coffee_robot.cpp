#include "robot.h"
#include <iostream>

//=============================================================================
// BI·∫æN TO√ÄN C·ª§C - Camera v√† ƒëi·ªÅu khi·ªÉn chu·ªôt
//=============================================================================
float cameraAngleX = 0.0f;    // G√≥c nh√¨n m·∫∑t ngang (0 = nh√¨n th·∫≥ng)
float cameraAngleY = 0.0f;    // G√≥c nh√¨n th·∫≥ng ph√≠a tr∆∞·ªõc
float cameraDistance = 15.0f; // Kho·∫£ng c√°ch xa h∆°n ƒë·ªÉ nh√¨n to√†n b·ªô b·ªëi c·∫£nh
bool mousePressed = false;     // Tr·∫°ng th√°i chu·ªôt c√≥ ƒëang ƒë∆∞·ª£c nh·∫•n
int lastMouseX, lastMouseY;    // V·ªã tr√≠ chu·ªôt l·∫ßn cu·ªëi

//=============================================================================
// KH·ªûI T·∫†O OPENGL - Thi·∫øt l·∫≠p √°nh s√°ng v√† m√¥i tr∆∞·ªùng 3D
//=============================================================================
void initGL() {
    glEnable(GL_DEPTH_TEST);      // B·∫≠t ki·ªÉm tra ƒë·ªô s√¢u (v·∫≠t g·∫ßn che v·∫≠t xa)
    glEnable(GL_LIGHTING);        // B·∫≠t h·ªá th·ªëng √°nh s√°ng
    glEnable(GL_LIGHT0);          // B·∫≠t ƒë√®n s·ªë 0
    glEnable(GL_COLOR_MATERIAL);  // Cho ph√©p m√†u s·∫Øc v·∫≠t li·ªáu
    glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
    
    // Thi·∫øt l·∫≠p √°nh s√°ng ch√≠nh
    GLfloat lightPos[] = {5.0f, 10.0f, 5.0f, 1.0f};      // V·ªã tr√≠ ƒë√®n (tr√™n cao, b√™n ph·∫£i)
    GLfloat lightColor[] = {1.0f, 1.0f, 1.0f, 1.0f};     // M√†u tr·∫Øng thu·∫ßn
    GLfloat ambientLight[] = {0.3f, 0.3f, 0.3f, 1.0f};   // √Ånh s√°ng m√¥i tr∆∞·ªùng nh·∫π
    
    glLightfv(GL_LIGHT0, GL_POSITION, lightPos);          // ƒê·∫∑t v·ªã tr√≠ ƒë√®n
    glLightfv(GL_LIGHT0, GL_DIFFUSE, lightColor);         // ƒê·∫∑t m√†u √°nh s√°ng khu·∫øch t√°n
    glLightfv(GL_LIGHT0, GL_AMBIENT, ambientLight);       // ƒê·∫∑t √°nh s√°ng m√¥i tr∆∞·ªùng
    
    glClearColor(0.5f, 0.7f, 1.0f, 1.0f); // M√†u n·ªÅn xanh da tr·ªùi nh·∫°t
    
    // Kh·ªüi t·∫°o robot v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
    initRobot();
}

// H√†m ti·ªán √≠ch ƒë·ªÉ l·∫•y text tr·∫°ng th√°i robot
const char* getStatusText() {
    switch (robot.phase) {
        case IDLE: return "NGHI - Nhan SPACE de bat dau pha ca phe";
        case REACH_CUP: return "Dang duoi tay toi coc...";
        case GRAB_CUP: return "Dang cam lay coc...";
        case TURN_TO_MACHINE: return "Dang xoay ve phia may pha ca phe...";
        case POUR_COFFEE: return "Dang rot ca phe...";
        case RETURN_CUP: return "Dang mang coc ve ban...";
        case PLACE_CUP: return "Dang dat coc xuong...";
        case GO_HOME: return "Dang ve vi tri ban dau...";
        case FINISHED: return "HOAN THANH - Nhan R de reset, SPACE de pha them";
        default: return "Trang thai khong xac dinh";
    }
}

//=============================================================================
// H√ÄM V·∫º CH√çNH - Render to√†n b·ªô scene 3D
//=============================================================================
void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // X√≥a buffer m√†u v√† ƒë·ªô s√¢u
    glLoadIdentity();                                   // Reset ma tr·∫≠n transformation
    
    // Thi·∫øt l·∫≠p camera 3D
    glTranslatef(0.0f, 0.0f, -cameraDistance);         // Di chuy·ªÉn camera ra xa
    glRotatef(cameraAngleX, 1.0f, 0.0f, 0.0f);         // Xoay camera l√™n/xu·ªëng
    glRotatef(cameraAngleY, 0.0f, 1.0f, 0.0f);         // Xoay camera tr√°i/ph·∫£i
    
    // V·∫Ω to√†n b·ªô scene
    drawScene();    // B√†n, m√°y pha c√† ph√™, c·ªëc
    drawRobot();    // Robot v·ªõi t·∫•t c·∫£ c√°c kh·ªõp
    
    // Hi·ªÉn th·ªã th√¥ng tin tr·∫°ng th√°i
    glDisable(GL_LIGHTING);    // T·∫Øt √°nh s√°ng ƒë·ªÉ v·∫Ω UI
    glDisable(GL_DEPTH_TEST);  // T·∫Øt depth test ƒë·ªÉ UI lu√¥n hi·ªÉn th·ªã tr√™n c√πng
    
    // V·∫Ω n·ªÅn cho text tr·∫°ng th√°i
    glColor4f(0.0f, 0.0f, 0.0f, 0.6f);  // M√†u ƒëen trong su·ªët 60%
    glEnable(GL_BLEND);                   // B·∫≠t ch·∫ø ƒë·ªô pha tr·ªôn m√†u
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    glBegin(GL_QUADS);                   // V·∫Ω h√¨nh ch·ªØ nh·∫≠t l√†m n·ªÅn
    glVertex3f(-4.0f, 4.5f, 0.0f);      // G√≥c tr√™n tr√°i
    glVertex3f(4.0f, 4.5f, 0.0f);       // G√≥c tr√™n ph·∫£i
    glVertex3f(4.0f, 3.5f, 0.0f);       // G√≥c d∆∞·ªõi ph·∫£i
    glVertex3f(-4.0f, 3.5f, 0.0f);      // G√≥c d∆∞·ªõi tr√°i
    glEnd();
    glDisable(GL_BLEND);                 // T·∫Øt ch·∫ø ƒë·ªô pha tr·ªôn
    
    // V·∫Ω text tr·∫°ng th√°i robot
    glColor3f(1.0f, 1.0f, 0.0f);        // M√†u v√†ng cho text
    glRasterPos3f(-3.8f, 4.2f, 0.0f);   // V·ªã tr√≠ b·∫Øt ƒë·∫ßu v·∫Ω text
    
    // S·ª≠ d·ª•ng tr·∫°ng th√°i t·ª´ robot.cpp thay v√¨ ƒë·ªãnh nghƒ©a tr√πng l·∫∑p
    const char* currentText = getStatusText();
    for (int i = 0; currentText[i] != '\0'; i++) {
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, currentText[i]);
    }
    
    glEnable(GL_DEPTH_TEST);    // B·∫≠t l·∫°i depth test
    glEnable(GL_LIGHTING);      // B·∫≠t l·∫°i √°nh s√°ng
    
    glutSwapBuffers();          // Hi·ªÉn th·ªã frame ho√†n ch·ªânh (double buffering)
}

//=============================================================================
// X·ª¨ L√ù B√ÄN PH√çM - ƒêi·ªÅu khi·ªÉn robot v√† ch∆∞∆°ng tr√¨nh
//=============================================================================
void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case ' ': // Ph√≠m Space - b·∫Øt ƒë·∫ßu quy tr√¨nh pha c√† ph√™
            if (!robot.moving) {
                startCoffeeSequence();
                std::cout << "ü§ñ Bat dau quy trinh pha ca phe..." << std::endl;
            } else {
                std::cout << "‚ö†Ô∏è  Robot dang ban. Nhan R de reset." << std::endl;
            }
            break;
            
        case 'r':
        case 'R': // Ph√≠m R - reset robot v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu
            resetRobot();
            std::cout << "üîÑ Robot da duoc reset ve vi tri ban dau." << std::endl;
            break;
            
        case 27: // Ph√≠m ESC - tho√°t ch∆∞∆°ng tr√¨nh
            std::cout << "üëã Tam biet!" << std::endl;
            exit(0);
            break;
    }
    glutPostRedisplay(); // Y√™u c·∫ßu v·∫Ω l·∫°i m√†n h√¨nh
}

//=============================================================================
// X·ª¨ L√ù CHU·ªòT - ƒêi·ªÅu khi·ªÉn camera b·∫±ng chu·ªôt
//=============================================================================
void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON) {  // Ch·ªâ x·ª≠ l√Ω chu·ªôt tr√°i
        if (state == GLUT_DOWN) {      // Khi nh·∫•n chu·ªôt xu·ªëng
            mousePressed = true;        // ƒê√°nh d·∫•u ƒëang k√©o chu·ªôt
            lastMouseX = x;            // L∆∞u v·ªã tr√≠ X ban ƒë·∫ßu
            lastMouseY = y;            // L∆∞u v·ªã tr√≠ Y ban ƒë·∫ßu
        } else {                       // Khi th·∫£ chu·ªôt ra
            mousePressed = false;       // K·∫øt th√∫c vi·ªác k√©o chu·ªôt
        }
    }
}

//=============================================================================
// X·ª¨ L√ù DI CHUY·ªÇN CHU·ªòT - Xoay camera khi k√©o chu·ªôt
//=============================================================================
void mouseMotion(int x, int y) {
    if (mousePressed) {                        // Ch·ªâ x·ª≠ l√Ω khi ƒëang k√©o chu·ªôt
        float deltaX = x - lastMouseX;         // ƒê·ªô di chuy·ªÉn theo tr·ª•c X
        float deltaY = y - lastMouseY;         // ƒê·ªô di chuy·ªÉn theo tr·ª•c Y
        
        cameraAngleY += deltaX * 0.5f;         // Xoay camera ngang (t·ª∑ l·ªá 0.5)
        cameraAngleX += deltaY * 0.5f;         // Xoay camera d·ªçc (t·ª∑ l·ªá 0.5)
        
        // Gi·ªõi h·∫°n g√≥c camera ƒë·ªÉ kh√¥ng xoay qu√° m·ª©c
        if (cameraAngleX > 90.0f) cameraAngleX = 90.0f;    // Kh√¥ng nh√¨n qu√° cao
        if (cameraAngleX < -90.0f) cameraAngleX = -90.0f;  // Kh√¥ng nh√¨n qu√° th·∫•p
        
        lastMouseX = x;                        // C·∫≠p nh·∫≠t v·ªã tr√≠ chu·ªôt m·ªõi
        lastMouseY = y;
        
        glutPostRedisplay();                   // Y√™u c·∫ßu v·∫Ω l·∫°i v·ªõi g√≥c camera m·ªõi
    }
}

//=============================================================================
// X·ª¨ L√ù PH√çM ƒê·∫∂C BI·ªÜT - Zoom camera b·∫±ng ph√≠m m≈©i t√™n
//=============================================================================
void specialKeys(int key, int x, int y) {
    switch (key) {
        case GLUT_KEY_UP:                      // Ph√≠m m≈©i t√™n l√™n - zoom in
            cameraDistance -= 1.0f;            // Gi·∫£m kho·∫£ng c√°ch = zoom in
            if (cameraDistance < 5.0f) cameraDistance = 5.0f;  // Gi·ªõi h·∫°n zoom in t·ªëi ƒëa
            break;
        case GLUT_KEY_DOWN:                    // Ph√≠m m≈©i t√™n xu·ªëng - zoom out
            cameraDistance += 1.0f;            // TƒÉng kho·∫£ng c√°ch = zoom out
            if (cameraDistance > 30.0f) cameraDistance = 30.0f; // Gi·ªõi h·∫°n zoom out t·ªëi ƒëa
            break;
    }
    glutPostRedisplay();                       // Y√™u c·∫ßu v·∫Ω l·∫°i v·ªõi zoom m·ªõi
}

//=============================================================================
// TIMER ANIMATION - C·∫≠p nh·∫≠t animation v·ªõi t·ªëc ƒë·ªô 60 FPS
//=============================================================================
void timer(int value) {
    updateRobot();                    // C·∫≠p nh·∫≠t tr·∫°ng th√°i robot (t·ª´ robot.cpp)
    glutPostRedisplay();              // Y√™u c·∫ßu v·∫Ω l·∫°i frame m·ªõi
    glutTimerFunc(16, timer, 0);      // L·∫∑p l·∫°i sau 16ms (~60 FPS)
}

//=============================================================================
// X·ª¨ L√ù THAY ƒê·ªîI K√çCH TH∆Ø·ªöC C·ª¨A S·ªî - ƒêi·ªÅu ch·ªânh viewport v√† perspective
//=============================================================================
void reshape(int width, int height) {
    if (height == 0) height = 1;     // Tr√°nh chia cho 0
    
    glViewport(0, 0, width, height); // ƒê·∫∑t viewport theo k√≠ch th∆∞·ªõc c·ª≠a s·ªï m·ªõi
    glMatrixMode(GL_PROJECTION);     // Chuy·ªÉn sang ch·∫ø ƒë·ªô projection matrix
    glLoadIdentity();                // Reset projection matrix
    
    // Thi·∫øt l·∫≠p perspective v·ªõi t·ª∑ l·ªá khung h√¨nh m·ªõi
    gluPerspective(45.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f);
    glMatrixMode(GL_MODELVIEW);      // Chuy·ªÉn v·ªÅ ch·∫ø ƒë·ªô modelview matrix
}

//=============================================================================
// HI·ªÇN TH·ªä H∆Ø·ªöNG D·∫™N - In ra console c√°c ph√≠m ƒëi·ªÅu khi·ªÉn
//=============================================================================
void printInstructions() {
    std::cout << "\n=== DEMO ROBOT PHA CA PHE ===" << std::endl;
    std::cout << "Dieu khien:" << std::endl;
    std::cout << "  SPACE  - Bat dau animation pha ca phe" << std::endl;
    std::cout << "  R      - Reset robot ve vi tri ban dau" << std::endl;
    std::cout << "  ESC    - Thoat chuong trinh" << std::endl;
    std::cout << "  Chuot  - Keo chuot trai de xoay camera" << std::endl;
    std::cout << "  MUI TEN- Len/Xuong de zoom in/out" << std::endl;
    std::cout << "\nCac pha hoat dong:" << std::endl;
    std::cout << "  1. Duoi tay toi coc" << std::endl;
    std::cout << "  2. Cam lay coc" << std::endl;
    std::cout << "  3. Xoay ve may pha ca phe" << std::endl;
    std::cout << "  4. Rot ca phe" << std::endl;
    std::cout << "  5. Mang coc ve ban" << std::endl;
    std::cout << "  6. Dat coc xuong" << std::endl;
    std::cout << "  7. Thu canh tay ve" << std::endl;
    std::cout << "================================\n" << std::endl;
}

//=============================================================================
// H√ÄM D·ªåN D·∫∏P - ƒê∆∞·ª£c g·ªçi khi tho√°t ch∆∞∆°ng tr√¨nh
//=============================================================================
void cleanup() {
    std::cout << "üßπ Don dep hoan thanh." << std::endl;
}

//=============================================================================
// H√ÄM MAIN - ƒêi·ªÉm b·∫Øt ƒë·∫ßu c·ªßa ch∆∞∆°ng tr√¨nh
//=============================================================================
int main(int argc, char** argv) {
    // ƒêƒÉng k√Ω h√†m cleanup ƒë·ªÉ ƒë∆∞·ª£c g·ªçi khi tho√°t
    atexit(cleanup);
    
    // Kh·ªüi t·∫°o GLUT (OpenGL Utility Toolkit)
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH); // Double buffer, RGB, depth
    glutInitWindowSize(1024, 768);                            // K√≠ch th∆∞·ªõc c·ª≠a s·ªï
    glutInitWindowPosition(100, 100);                         // V·ªã tr√≠ c·ª≠a s·ªï tr√™n m√†n h√¨nh
    
    // T·∫°o c·ª≠a s·ªï OpenGL
    int window = glutCreateWindow("Demo Robot Pha Ca Phe");
    if (window == 0) {
        std::cerr << "‚ùå Khong the tao cua so OpenGL!" << std::endl;
        return -1;
    }
    
    // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    printInstructions();
    
    // Kh·ªüi t·∫°o OpenGL v·ªõi x·ª≠ l√Ω l·ªói
    try {
        initGL();
    } catch (const std::exception& e) {
        std::cerr << "‚ùå Loi khoi tao OpenGL: " << e.what() << std::endl;
        return -1;
    }
    
    // ƒêƒÉng k√Ω c√°c callback functions
    glutDisplayFunc(display);          // H√†m v·∫Ω
    glutReshapeFunc(reshape);          // H√†m x·ª≠ l√Ω thay ƒë·ªïi k√≠ch th∆∞·ªõc
    glutKeyboardFunc(keyboard);        // H√†m x·ª≠ l√Ω b√†n ph√≠m
    glutSpecialFunc(specialKeys);      // H√†m x·ª≠ l√Ω ph√≠m ƒë·∫∑c bi·ªát
    glutMouseFunc(mouse);              // H√†m x·ª≠ l√Ω chu·ªôt
    glutMotionFunc(mouseMotion);       // H√†m x·ª≠ l√Ω di chuy·ªÉn chu·ªôt
    glutTimerFunc(16, timer, 0);       // H√†m timer cho animation
    
    std::cout << "‚úÖ OpenGL khoi tao thanh cong. Bat dau vong lap chinh..." << std::endl;
    
    // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ch√≠nh c·ªßa GLUT
    glutMainLoop();
    
    return 0;
}
